AWSTemplateFormatVersion: 2010-09-09

Parameters:

  EnvironmentName:
    Description: Name of the environment
    Type: String
    Default: gluelabs

  MyAssetsBucketName:
    Description: Assets bucket name
    Type: String

  MyAssetsBucketPrefix:
    Description: Assets bucket prefix
    Type: String

  GlueScriptLocationLab2:
    Description: Assets bucket prefix
    Type: String

  GreenTripData:
    Description: Assets bucket prefix
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  MaxWorkerNodes:
    Description: The maximum number of workers that can run in the environment
    Type: Number
    Default: 2

  DagProcessingLogs:
    Description: Log level for DagProcessing
    Type: String
    Default: INFO

  SchedulerLogsLevel:
    Description: Log level for SchedulerLogs
    Type: String
    Default: INFO

  TaskLogsLevel:
    Description: Log level for TaskLogs
    Type: String
    Default: INFO

  WorkerLogsLevel:
    Description: Log level for WorkerLogs
    Type: String
    Default: INFO

  WebserverLogsLevel:
    Description: Log level for WebserverLogs
    Type: String
    Default: INFO


Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'mwaa-${AWS::AccountId}-${AWS::Region}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
    #   NotificationConfiguration:
    #     QueueConfigurations:
    #       - Event: 's3:ObjectCreated:*'
    #         Filter:
    #           S3Key:
    #             Rules:
    #               - Name: prefix
    #                 Value: input/lab1/eventnotification/
    #         Queue: !GetAtt Lab1EventQueue.Arn
    # DependsOn: Lab1EventQueue
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${S3Bucket}
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${S3Bucket}/cloudtrail/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MWAAEnvironment

  MWAAInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MWAAEnvironment

  MWAAInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MWAAInternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: MWAAInternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: MWAAInternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MWAAInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MWAAInternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  MWAAEnvironment:
    Type: AWS::MWAA::Environment
    DependsOn: MwaaExecutionPolicy
    Properties:
      Name: !Sub "${AWS::StackName}-MWAAEnvironment"
      SourceBucketArn: !GetAtt S3Bucket.Arn
      ExecutionRoleArn: !GetAtt MwaaExecutionRole.Arn
      DagS3Path: dags
      AirflowVersion: 2.2.2
      NetworkConfiguration:
        SecurityGroupIds:
          - !GetAtt SecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      WebserverAccessMode: PUBLIC_ONLY
      MaxWorkers: !Ref MaxWorkerNodes
      LoggingConfiguration:
        DagProcessingLogs:
          LogLevel: !Ref DagProcessingLogs
          Enabled: true
        SchedulerLogs:
          LogLevel: !Ref SchedulerLogsLevel
          Enabled: true
        TaskLogs:
          LogLevel: !Ref TaskLogsLevel
          Enabled: true
        WorkerLogs:
          LogLevel: !Ref WorkerLogsLevel
          Enabled: true
        WebserverLogs:
          LogLevel: !Ref WebserverLogsLevel
          Enabled: true

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub "Security Group for Amazon MWAA Environment ${AWS::StackName}-MwaaEnvironment"
      GroupName: !Sub "airflow-security-group-${AWS::StackName}-MwaaEnvironment"
  
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SecurityGroup

  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"
      CidrIp: "0.0.0.0/0"

  MwaaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - airflow-env.amazonaws.com
                - airflow.amazonaws.com
                - glue.amazonaws.com
            Action:
            - "sts:AssumeRole"
      Path: "/service-role/"

  MwaaExecutionPolicy:
    DependsOn: S3Bucket
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MwaaExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: airflow:PublishMetrics
            Resource:
              - !Sub "arn:aws:airflow:${AWS::Region}:${AWS::AccountId}:environment/${EnvironmentName}"
          - Effect: Deny
            Action: s3:ListAllMyBuckets
            Resource:
              - !Sub "${S3Bucket.Arn}"
              - !Sub "${S3Bucket.Arn}/*"

          - Effect: Allow
            Action:
              - "s3:GetObject*"
              - "s3:GetBucket*"
              - "s3:List*"
            Resource:
              - !Sub "${S3Bucket.Arn}"
              - !Sub "${S3Bucket.Arn}/*"
          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
            Resource: "*"

          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:GetLogEvents
              - logs:GetLogRecord
              - logs:GetLogGroupFields
              - logs:GetQueryResults
              - logs:DescribeLogGroups
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:airflow-${AWS::StackName}*"
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
            Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:*:airflow-celery-*"
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - "kms:GenerateDataKey*"
              - kms:Encrypt
            NotResource: !Sub "arn:aws:kms:*:${AWS::AccountId}:key/*"
            Condition:
              StringLike:
                "kms:ViaService":
                  - !Sub "sqs.${AWS::Region}.amazonaws.com"

#   Trail:
#     Type: AWS::CloudTrail::Trail
#     Properties:
#       TrailName: 'glueworkshop-trail'
#       IsLogging: True
#       S3BucketName: !Ref S3Bucket
#       S3KeyPrefix: cloudtrail
#       EventSelectors:
#         - DataResources:
#             - Type: AWS::S3::Object
#               Values:
#               - !Sub arn:aws:s3:::${S3Bucket}/input/lab2/eventdriven/
#           IncludeManagementEvents: False
#           ReadWriteType: WriteOnly
#     DependsOn:
#       - S3Bucket
#       - S3BucketPolicy
#   AWSGlueServiceRole:
#     Type: 'AWS::IAM::Role'
#     Properties:
#       RoleName: AWSGlueServiceRole-glueworkshop
#       AssumeRolePolicyDocument:
#         Version: 2012-10-17
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: glue.amazonaws.com
#             Action: 'sts:AssumeRole'
#       ManagedPolicyArns:
#         - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
#         - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
#         - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
#         - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
#         - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
#         - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
#       Policies:
#         - PolicyName: passRole-glue
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: Allow
#                 Action: 'iam:PassRole'
#                 Resource: "*"
#   AWSGlueDataBrewServiceRole:
#     Type: 'AWS::IAM::Role'
#     Properties:
#       RoleName: AWSGlueDataBrewServiceRole-glueworkshop
#       AssumeRolePolicyDocument:
#         Version: 2012-10-17
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: databrew.amazonaws.com
#             Action: 'sts:AssumeRole'
#       ManagedPolicyArns:
#         - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
#         - 'arn:aws:iam::aws:policy/service-role/AWSGlueDataBrewServiceRole'
#   AWSEventBridgeInvokeGlueRole:
#     Type: 'AWS::IAM::Role'
#     Properties:
#       RoleName: AWSEventBridgeInvokeRole-glueworkshop
#       AssumeRolePolicyDocument:
#         Version: 2012-10-17
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: events.amazonaws.com
#             Action: 'sts:AssumeRole'
#       Policies:
#         - PolicyName: EventBridgeInvokeGlue
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: Allow
#                 Action: 'glue:notifyEvent'
#                 Resource: "*"
#         - PolicyName: EventBridgeInvokeStepFunction
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: Allow
#                 Action: 'states:StartExecution'
#                 Resource: "*"
#   AWSStepFunctionRole:
#     Type: 'AWS::IAM::Role'
#     Properties:
#       RoleName: AWSStepFunctionRole-glueworkshop
#       AssumeRolePolicyDocument:
#         Version: 2012-10-17
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: states.amazonaws.com
#             Action: 'sts:AssumeRole'
#       ManagedPolicyArns:
#         - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
#         - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
#         - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
#   AWSEC2ServiceRole:  ###NEED TO CHECK WHICH ROLES ARE REALLY REQUIRED. TRY TO LIMIT AS MUCH AS POSSIBLE!!!
#     Type: 'AWS::IAM::Role'
#     Properties:
#       RoleName: AWSEC2ServiceRole-etl-ttt-demo
#       AssumeRolePolicyDocument:
#         Version: 2012-10-17
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: ec2.amazonaws.com
#             Action: 'sts:AssumeRole'
#       ManagedPolicyArns:
#         - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
#         - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
#         - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
#         - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
#         - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
#         - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
#         - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
#         - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
#         - 'arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess'
#         - 'arn:aws:iam::aws:policy/IAMFullAccess'
#       Policies:
#         - PolicyName: FurtherRequiredInlinePolicy
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - lambda:*
#                   - codecommit:*
#                   - codebuild:*
#                   - codepipeline:*
#                   - codedeploy:*
#                 Resource:
#                   - !Sub arn:aws:codecommit:*:${AWS::AccountId}:*
#                   - !Sub arn:aws:codebuild:*:${AWS::AccountId}:*
#                   - !Sub arn:aws:codepipeline:*:${AWS::AccountId}:*
#                   - !Sub arn:aws:codedeploy:*:${AWS::AccountId}:*
#                   - !Sub arn:aws:lambda:*:${AWS::AccountId}:function:*
#               - Effect: Allow
#                 Action:
#                   - codecommit:ListRepositories
#                   - databrew:*
#                   - states:*
#                 Resource: "*"
#   AWSEC2InstanceProfileGlueWorkshop:
#     Type: 'AWS::IAM::InstanceProfile'
#     Properties:
#       InstanceProfileName: AWSEC2InstanceProfile-GlueWorkshop
#       Path: /
#       Roles:
#         - !Ref AWSEC2ServiceRole
#   Lab1EventQueue:
#     Type: AWS::SQS::Queue
#     Properties:
#       QueueName: 'glueworkshop-lab1-event-queue'
#   Lab1EventQueuePolicy:
#     Type: AWS::SQS::QueuePolicy
#     Properties:
#       PolicyDocument:
#         Id: glueworkshop-lab1-event-queue-policy
#         Version: '2012-10-17'
#         Statement:
#           - Sid: S3Permission
#             Effect: Allow
#             Principal:
#               Service: s3.amazonaws.com
#             Action:
#               - SQS:SendMessage
#             Resource: !GetAtt Lab1EventQueue.Arn
#       Queues:
#         - !Ref Lab1EventQueue
#     DependsOn: Lab1EventQueue
#   KinesisStream:
#     Type: AWS::Kinesis::Stream
#     Properties:
#         Name: glueworkshop
#         RetentionPeriodHours: 24
#         ShardCount: 2
 
#   Cloud9IDE:
#     Type: AWS::Cloud9::EnvironmentEC2
#     Properties:
#       AutomaticStopTimeMinutes: 4320
#       ConnectionType: CONNECT_SSH
#       Description: 'Cloud9 environment created for Glue workshop'
#       ImageId: amazonlinux-2-x86_64
#       InstanceType: m5.large
#       Name: glueworkshop
#       SubnetId: !Ref WorkshopSubnet2
#       OwnerArn: !Sub 'arn:aws:sts::${AWS::AccountId}:assumed-role/WSParticipantRole/Participant'

#   Lab8MockJobDataExtract:
#     Type: AWS::Glue::Job
#     Properties:
#       Command:
#         Name: glueetl
#         ScriptLocation: !Ref GlueScriptLocationLab2
#       MaxRetries: 0
#       Name: ny-taxi-transformed-cfn-jb
#       GlueVersion: '4.0'
#       Role: !Ref AWSGlueServiceRole


#   Lab8SNSTopicSuccess:
#     Type: AWS::SNS::Topic
#     Properties:
#       TopicName: glueworkshop-sns-success-notification

#   Lab8SNSTopicFailure:
#     Type: AWS::SNS::Topic
#     Properties:
#       TopicName: glueworkshop-sns-failure-notification


# Outputs:
#   S3BucketName:
#     Description: This is the bucket created as part of this workshop!
#     Value: !Ref S3Bucket
#   AWSRegion:
#     Description: This is the current AWS Region for this workshop!
#     Value: !Sub ${AWS::Region}
#   AWSAccount:
#     Description: This is the current AWS Account for this workshop!
#     Value: !Sub ${AWS::AccountId}
#   GreenTripData:
#     Description: the output of a variable
#     Value: !Ref GreenTripData